openapi: 3.0.3
info:
  title: P.R.I.T. Strecklista API
  description: API of the "strecklista" developed by and for
    [P.R.I.T.](https://prit.chalmers.it) at Chalmers'
    [IT student division](https://chalmers.it).
  contact:
    email: cal@chalmers.it
  license:
    name: MIT License
    url: https://github.com/olillin/prit-streck-backend/blob/main/LICENSE
  version: 1.0.0
externalDocs:
  description: Old API documentation
  url: https://docs.google.com/document/d/1KiCo3THSqslC1P8mMXRVONOrT_bQvYtZV1Pq-U-a90g

servers:
  - url: https://prittemp.olillin.com/api
    description: Temporary development server

tags:
  - name: authorization
    description: Authorize through Gamma
  - name: user
    description: Access the logged in user
  - name: group
    description: Access the logged in user's group
  - name: item
    description: Access group items
  - name: transaction
    description: Access group transactions

components:
  securitySchemes:
    bearer:
      type: http
      description: This API uses OAuth 2 with the authorization code flow through [Gamma](https://auth.chalmers.it).
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Error:
      type: object
      required:
        - error
      properties:
        error:
          type: object
          required:
            - code
          properties:
            code:
              type: integer
              description: HTTP status code
            message:
              type: string
              required: true
              description: Message describing the error
    GroupId:
      description: "ID that uniquely identifies a group"
      type: string
      format: UUID
    UserId:
      description: "ID that uniquely identifies a user"
      type: string
      format: UUID
    Group:
      description: "A group"
      type: object
      required:
        - id
        - prettyName
        - avatarUrl
      properties:
        id:
          $ref: "#/components/schemas/GroupId"
        prettyName:
          description: Display name of the group from Gamma
          type: string
        avatarUrl:
          description: URL to the group's avatar image
          type: string
          format: URL
    User:
      description: "A user"
      type: object
      required:
        - id
        - firstName
        - lastName
        - nick
        - avatarUrl
        - balance
      properties:
        id:
          $ref: "#/components/schemas/UserId"
        firstName:
          description: "First name from Gamma"
          type: string
        lastName:
          description: "Last name from Gamma"
          type: string
        nick:
          description: "Nick from Gamma"
          type: string
        avatarUrl:
          description: "URL to the user's avatar image"
          type: string
          format: URL
        balance:
          description: "Balance total"
          type: number
          format: SEK
    ItemId:
      description: ID that uniquely identifies item
      type: integer
      minimum: 1
    Item:
      description: A store item
      type: object
      required:
        - id
        - addedTime
        - displayName
        - prices
        - timesPurchased
        - visible
        - favorite
      properties:
        id:
          $ref: "#/components/schemas/ItemId"
        addedTime:
          description: When the item was created
          type: integer
          format: timestamp
        icon:
          description: Icon URL
          type: string
          format: URL
        displayName:
          type: string
        prices:
          type: array
          items:
            $ref: "#/components/schemas/Price"
          minItems: 1
        timesPurchased:
          description: How many of the item has been sold
          type: integer
        visible:
          description: Whether or not to show the item in the store
          type: boolean
        favorite:
          description: Whether or not this item is marked as a favorite
          type: boolean
    Price:
      description: An item price
      type: object
      required:
        - price
        - displayName
      properties:
        price:
          type: number
          format: SEK
        displayName:
          type: string
    TransactionType:
      description: Type of a transaction
      type: string
      enum:
        - purchase
        - deposit
    Transaction:
      type: object
      required:
        - type
        - id
        - createdBy
        - createdFor
        - createdTime
      properties:
        type:
          $ref: "#/components/schemas/TransactionType"
        id:
          description: ID that uniquely identifies a transaction
          type: integer
        createdBy:
          $ref: "#/components/schemas/UserId"
        createdFor:
          $ref: "#/components/schemas/UserId"
        createdTime:
          description: When this transaction was created
          type: integer
          format: timestamp
    Purchase:
      allOf:
        - $ref: "#/components/schemas/Transaction"
        - type: object
          required:
            - items
          properties:
            items:
              description: List of purchased items
              type: array
              minItems: 1
              items:
                $ref: "#/components/schemas/PurchasedItem"
    PurchasedItem:
      description: An item that has been purchased
      required:
        - item
        - quantity
        - purchasePrice
      properties:
        item:
          type: object
          required:
            - displayName
          properties:
            id:
              $ref: "#/components/schemas/ItemId"
            displayName:
              type: string
            icon:
              description: Icon URL
              type: string
              format: URL
        quantity:
          type: integer
          minimum: 1
        purchasePrice:
          $ref: "#/components/schemas/Price"
    Deposit:
      allOf:
        - $ref: "#/components/schemas/Transaction"
        - type: object
          required:
            - items
          properties:
            total:
              description: Value of the deposit
              type: number
              format: SEK
    LoginResponse:
      type: object
      required:
        - access_token
        - expires_in
        - token_type
        - data
      properties:
        access_token:
          type: string
          format: JWT
        expires_in:
          description: The expiration time in seconds
          type: integer
        token_type:
          type: string
        data:
          type: object
          required:
            - user
            - group
          properties:
            user:
              $ref: "#/components/schemas/User"
            group:
              $ref: "#/components/schemas/Group"

  examples:
    InvalidUserId:
      value:
        error:
          code: 400
          message: "Invalid user ID"
    UserNotExist:
      value:
        error:
          code: 404
          message: "User does not exist"
    InvalidItemId:
      value:
        error:
          code: 400
          message: "Invalid item ID"
    ItemNotExist:
      value:
        error:
          code: 404
          message: "Item does not exist"
    InvalidTransactionId:
      value:
        error:
          code: 400
          message: "Invalid transaction ID"
    TransactionNotExist:
      value:
        error:
          code: 404
          message: "Transaction does not exist"
    InvalidUrl:
      value:
        error:
          code: 400
          message: "URL is invalid"
    #    Authorization
    Unauthorized:
      value:
        error:
          code: 401
          message: "Unauthorized"
    ExpiredToken:
      value:
        error:
          code: 401
          message: "Token is expired"
    InvalidToken:
      value:
        error:
          code: 401
          message: "Token is invalid, generate a new one"
    BeforeNbf:
      value:
        error:
          code: 401
          message: "Token cannot be used yet"
    NoPermission:
      value:
        error:
          code: 403
          message: "No permission to access this service"
    #    Gamma
    GammaToken:
      value:
        error:
          code: 502
          message: "Failed to get token from Gamma, your authorization code may be invalid"
    InvalidGammaResponse:
      value:
        error:
          code: 502
          message: "Received an invalid response from Gamma"
    UnreachableGamma:
      value:
        error:
          code: 504
          message: "Unable to reach Gamma"
    #    Login
    NoAuthorizationCode:
      value:
        error:
          code: 401
          message: "No authorization code provided"
    AuthorizationCodeUsed:
      value:
        error:
          code: 401
          message: "Authorization code has already been used"
    #    Create purchase
    ItemCount:
      value:
        error:
          code: 400
          message: "Item count must be an integer greater than 0"
    PurchaseNothing:
      value:
        error:
          code: 400
          message: "Must purchase at least one item"
    PurchaseInvisible:
      value:
        error:
          code: 403
          message: "Cannot purchase a non-visible item"
    #    Create deposit
    InvalidTotal:
      value:
        error:
          code: 400
          message: "Total must be a number"
    #    List transactions
    InvalidLimit:
      value:
        error:
          code: 400
          message: "Limit must be an integer between 1 and 100"
    InvalidOffset:
      value:
        error:
          code: 400
          message: "Offset must be a positive integer"
    #    Create/modify item
    DisplayNameNotUnique:
      value:
        error:
          code: 403
          message: "Display name is not unique"
    MissingPrices:
      value:
        error:
          code: 400
          message: "An item must have at least one price"
    #    List items
    UnknownSortMode:
      value:
        error:
          code: 400
          message: "Unknown sort order"
    #    Properties
    MissingRequiredProperty:
      value:
        error:
          code: 400
          message: "Missing required property '{name}' in {location}"
    InvalidProperty:
      value:
        error:
          code: 400
          message: "Property '{name}' is invalid in {location}"
    Unexpected:
      value:
        error:
          code: 500
          message: "An unexpected issue occured. Please create an issue on GitHub. Details: {details}"
    TokenSignError:
      value:
        error:
          code: 500
          message: "Failed to sign JWT: {details}"

security:
  - bearer: [ ]

paths:
  /authorize:
    get:
      tags:
        - authorization
      security: [ ]
      servers:
        - url: https://prittemp.olillin.com
      responses:
        302:
          description: "Redirect to Gamma login page"
  /login:
    post:
      tags:
        - authorization
      servers:
        - url: https://prittemp.olillin.com
      security: [ ]
      parameters:
        - in: query
          name: code
          schema:
            type: string
            format: authorization code
          required: true
          description: Authorization code from Gamma

      responses:
        "200":
          description: "Successfully logged in"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "401":
          description: "Failed to login"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                NoAuthorizationCode:
                  $ref: "#/components/examples/NoAuthorizationCode"
                AuthorizationCodeUsed:
                  $ref: "#/components/examples/AuthorizationCodeUsed"
  /group:
    get:
      tags:
        - group
      responses:
        200:
          description: "OK"